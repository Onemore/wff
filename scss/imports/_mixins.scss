// [$position description]
// @type {[type]}

@mixin container($position: center) {
  @if $position == center {
    @extend %container-c-#{$wff-id};
  }
  @elseif $position == left {
    @extend %container-l-#{$wff-id};
  }
  @elseif $position == right {
    @extend %container-r-#{$wff-id};
  }
}

// [$position description]

@mixin row() {
  @extend %row-#{$wff-id};
}

// [$position description]
// [$size description]
// @type {Number}

@mixin column($size: 1, $position: false) {
  $parent: wff-get(columns);
  $nested: length($size) == 3 and wff-get(math) != static;
  @if $nested { $parent: nth($size, 3); }

  @extend %column-#{nth($size, 1)}-of-#{$parent}-#{$wff-id};

  @if $position == false {
    @extend %column-m-#{$parent}-#{$wff-id};
  }
  @elseif nth($position, 1) == shift {
    @extend %column-m-#{$parent}-#{$wff-id};
    @extend %column-s-#{nth($position, 2)}-of-#{$parent}-#{$wff-id};
  }
  @elseif $position == last {
    @extend %last-#{$wff-id};
  }
}

// span
// $size:     unitless
// $position: none / last / shift n

@mixin span($size: 1, $position: false) {
  $parent: wff-get(columns);
  $nested: length($size) == 3 and wff-get(math) != static;
  @if $nested { $parent: nth($size, 3); }

  @extend %span-#{nth($size, 1)}-of-#{$parent}-#{$wff-id};

  @if $position == false {
    @extend %span-m-#{$wff-id};
  }
  @elseif nth($position, 1) == shift {
    @extend %span-m-#{$wff-id};
    @extend %span-s-#{nth($position, 2)}-of-#{$parent}-#{$wff-id};
  }
  @elseif $position == last {
    @extend %last-#{$wff-id};
  }
}

// column-gallery
// $size:  unitless
// $unset: unitless

@mixin column-gallery($size: 1, $unset: 0) {
  $parent: wff-get(columns);
  $nested: length($size) == 3 and wff-get(math) != static;
  @if $nested { $parent: nth($size, 3); }
  $per-line: ceil($parent / nth($size, 1));

  @include column($size);

  @if $unset > 0 {
    &:nth-of-type(#{$unset}n) {
      @include column($size);
    }
  }
  &:nth-of-type(#{$per-line}n+#{$per-line}) {
    @extend %last-#{$wff-id};
  }
}

// span-gallery
// $size:  unitless
// $unset: unitless

@mixin span-gallery($size: 1, $unset: 0) {
  $parent: wff-get(columns);
  $nested: length($size) == 3 and wff-get(math) != static;
  @if $nested { $parent: nth($size, 3); }
  $per-line: ceil($parent / nth($size, 1));
  
  @include span($size);

  @if $unset > 0 {
    &:nth-of-type(#{$unset}n) {
      @include span($size);
    }
  }
  &:nth-of-type(#{$per-line}n+#{$per-line}) {
    @extend %last-#{$wff-id};
  }
}

//external

@mixin external() {
  $width:  wff-get(width);
  $gutter: wff-get(gutter);

  @if wff-get(math) == fluid {
    width: 100% * ($width / ($width + (2 * $gutter)));
  }
}

// placeholders

@mixin placeholders() {
  $fluid:   wff-get(math) == fluid;
  $static:  wff-get(math) == static;
  $width:   wff-get(width);
  $columns: wff-get(columns);
  $gutter:  wff-get(gutter);
  $column:  math-get(column);
  $span:    math-get(span);

  $start: null;
  @if $fluid { $start: 2; }
  @elseif $static { $start: $columns; }
  
  // container
  %container-c-#{$wff-id} {
    @if $fluid { max-width: $width; }
    @elseif $static { width: $width; }
    margin-right: auto;
    margin-left: auto;
  }

  %container-l-#{$wff-id} {
    @if $fluid { max-width: $width; }
    @elseif $static { width: $width; }
    margin-right: auto;
    margin-left: 0;
  }

  %container-r-#{$wff-id} {
    @if $fluid { max-width: $width; }
    @elseif $static { width: $width; }
    margin-right: 0;
    margin-left: auto;
  }

  // row
  %row-#{$wff-id} {
    &:after {
      content: "";
      display: block;
      clear: both;
    }
  }

  // columns
  @for $parent from $start through $columns {
    $p-width: math-get(column, $parent);

    @for $size from 1 through $parent - 1 {
      %column-#{$size}-of-#{$parent}-#{$wff-id} {
        width: value(math-get(column, $size), $p-width);
      }
    }
  }

  // spans
  @for $parent from $start through $columns {
    $p-width: math-get(span, $parent);

    @for $size from 1 through $parent - 1 {
      %span-#{$size}-of-#{$parent}-#{$wff-id} {
        width: value(math-get(span, $size), $p-width);
      }
    }
  }

  // shifted columns
  @for $parent from $start through $columns {
    $p-width: math-get(column, $parent);

    @for $size from 1 through $parent - 1 {
      %column-s-#{$size}-of-#{$parent}-#{$wff-id} {
        margin-left: value(($column + $gutter) * $size, $p-width);
      }
    }
  }

  // shifted spans
  @for $parent from $start through $columns {
    $p-width: math-get(span, $parent);

    @for $size from 1 through $parent - 1 {
      %span-s-#{$size}-of-#{$parent}-#{$wff-id} {
        margin-left: value($span * $size, $p-width);
      }
    }
  }

  // columns margins
  @for $parent from $start through $columns {
    $p-width: math-get(column, $parent);

    %column-m-#{$parent}-#{$wff-id} {
      float: left;
      margin-right: value($gutter, $p-width);
    }
  }

  // spans margins
  %span-m-#{$wff-id} {
    float: left;
  }

  // last of type
  %last-#{$wff-id} {
    float: right;
    margin-right: 0;
  }
}

// breakpoint
// $query:        string
// $layout:       map
// $placeholders: boolean

@mixin breakpoint($query: 'screen', $layout: $wff, $placeholders: true) {
  @media #{$query} {
    $old:    $wff;
    $wff:    $layout     !global;
    $wff-id: unique-id() !global;

    @if $placeholders {
      @include placeholders;
    }
    @content;

    $wff:    $old !global;
    $wff-id: null !global;
  }
}
