// map-set() - not included with Sass
// thanks @Team-Sass (https://github.com/Team-Sass/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss)

@function map-set($map, $key, $value) {
  @return map-merge($map, ($key: $value));
}

// wff-get() - get $wff value
// short for map-get($wff, $key)

@function wff-get($key) {
  @return map-get($wff, $key);
}

// math-get() - get computed value
// column-size / span-size

@function math-get($name, $size: null) {
  $width:   wff-get(width);
  $columns: wff-get(columns);
  $gutter:  wff-get(gutter);
  $result:  null;

  @if $name == column {
    $result: ($width - $gutter * ($columns - 1)) / $columns;
    @if $size {
      $result: ($result + $gutter) * $size - $gutter;
    }
  }
  @elseif $name == span {
    $result: $width / $columns;
    @if $size {
      $result: $result * $size;
    }
  }

  @return $result;
}


// [value description]
// @param  {[type]} $value  [description]
// @param  {[type]} $width: wff-get(width) [description]
// @return {[type]}         [description]

@function value($value, $width: wff-get(width)) {
  $fluid:  wff-get(math) == fluid;
  $static: wff-get(math) == static;

  @if $fluid {
    @return 100% / ($width / $value);
  }
  @else if $static {
    @return $value;
  }
}

// layout() - generate a layout from the default one
// merge $map and $wff and return result

@function layout($map) {
  $new: $wff;

  @each $key, $value in $map {
    @if map-has-key($wff, $key) {
      $new: map-set($new, $key, $value);
    }
  }

  @return $new;
}

// default-layout() - override default layout
// merge $map and $wff in $wff global

@function default-layout($map) {
  $wff: layout($map) !global;

  @return $wff;
}
