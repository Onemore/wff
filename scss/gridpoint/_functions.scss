// Gridpoint functions
// -------------------
// Documentation: 


// _lv() - layout value
// --------------------
// Usage: $var: _lv($key)
// 
// $key: map key

@function _lv($key) {
  @if map-has-key($_internal, $key) {
    @return map-get($_internal, $key);
  }

  @return null;
}

// _cv() - calculated value
// ------------------------
// Usage: $var: _cv($name)
// 
// $name: (column-size / span-size / gutter-size)

@function _cv($name) {
  $width:   _lv(width);
  $columns: _lv(columns);
  $gutters: _lv(gutters);

  $fluid:  $math == fluid;
  $static: $math == static;

  @if $name == column-size {
    $gutters-nbr: $gutters * ($columns - 1);
    $columns-size: $width - $gutters-nbr;
    $column-size: $columns-size / $columns;
    $result: $width / $column-size;

    @if $fluid { $result: 100% / $result }
    @if $static { $result: $width / $result }
    
    @return $result;
  }
  @else if $name == span-size {
    $span-size: $width / $columns;
    $result: $width / $span-size;

    @if $fluid { $result: 100% / $result }
    @if $static { $result: $width / $result }
    
    @return $result;
  }
  @else if $name == gutter-size {
    @if unitless($gutters) and $gutters < 1 {

    }

    $result: $width / $gutters;

    @if $fluid { $result: 100% / $result }
    @if $static { $result: $width / $result }

    @return $result;
  }

  @return null;
}

// layout()
// --------
// Usage: $var: layout($map)
// 
// $map: map

@function layout($map) {
  $new-map: $_internal;
  
  @each $key, $value in $map {
    @if map-has-key($_internal, $key) {
      $new-map: map-merge($new-map, ($key: $value));
    }
  }

  @return $new-map;
}
