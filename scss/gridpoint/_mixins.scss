// Gridpoint mixins
// ----------------
// Documentation: 


// container
// ---------
// Usage: @include container($position);
// 
// $position: (center / left / right)

@mixin container($position: center) {
  $suffix: 'x';
  @if $_unique-id { $suffix: $_unique-id }

  @if $position == center {
    @extend %_cont-c-#{$suffix};
  }
  @else if $position == left {
    @extend %_cont-l-#{$suffix};
  }
  @else if $position == right {
    @extend %_cont-r-#{$suffix};
  }
}

// row
// ---
// Usage: @include row;

@mixin row() {
  $suffix: 'x';
  @if $_unique-id { $suffix: $_unique-id }

  @extend %row-#{$suffix};
}

// column
// ------
// Usage: @include column($size, $position);
// 
// $size: unitless
// $position: (first / last / shift n)

@mixin column($size: 1, $position: first) {
  $suffix: 'x';
  @if $_unique-id { $suffix: $_unique-id }

  @extend %_col-#{$size}-#{$suffix};

  @if $position == first {
    @extend %_col-f-#{$suffix};
  }
  @else if $position == last {
    @extend %_col-l-#{$suffix};
  }
  @else if nth($position, 1) == shift {
    @extend %_col-f-#{$suffix};

    $column-size: _cv(column-size);
    $gutter-size: _cv(gutter-size);

    margin-left: ($column-size + $gutter-size) * nth($position, 2);
  }
}

// span
// ----
// Usage: @include span($size, $position);
// 
// $size: unitless
// $position: (first / last / shift unitless)

@mixin span($size: 1, $position: first) {
  $suffix: 'x';
  @if $_unique-id { $suffix: $_unique-id }

  @extend %_span-#{$size}-#{$suffix};

  @if $position == first {
    @extend %_span-f-#{$suffix};
  }
  @else if $position == last {
    @extend %_span-l-#{$suffix};
  }
  @else if nth($position, 1) == shift {
    @extend %_span-f-#{$suffix};

    $span-size: _cv(span-size);

    margin-left: $_span-size * nth($position, 2);
  }
}

// column-gallery
// --------------
// Usage: @include column-gallery($size, $unset);
// 
// $size: unitless
// $unset: unitless

@mixin column-gallery($size: 1, $unset: 0) {
  $suffix: 'x';
  @if $_unique-id { $suffix: $_unique-id }

  @extend %_col-#{$size}-#{$suffix};
  @extend %_col-f-#{$suffix};

  $per-line: ceil(_lv(columns) / $size);

  @if $unset > 0 {
    &:nth-of-type(#{$unset}n+#{$unset}) {
      @extend %_col-#{$size}-#{$suffix};
    }
  }
  
  &:nth-of-type(#{$per-line}n+#{$per-line}) {
    @extend %_col-l-#{$suffix};
  }
}

// span-gallery
// ------------
// Usage: @include span-gallery($size, $unset);
// 
// $size: unitless
// $unset: unitless

@mixin span-gallery($size: 1, $unset: 0) {
  $suffix: 'x';
  @if $_unique-id { $suffix: $_unique-id }
  
  @extend %_span-#{$size}-#{$suffix};
  @extend %_span-f-#{$suffix};

  $per-line: ceil(_lv(columns) / $size);

  @if $unset > 0 {
    &:nth-of-type(#{$unset}n+#{$unset}) {
      @extend %_span-#{$size}-#{$suffix};
    }
  }
  
  &:nth-of-type(#{$per-line}n+#{$per-line}) {
    @extend %_span-l-#{$suffix};
  }
}

// gridpoint
// ---------
// Usage: @include gridpoint($query, $layout);
// 
// $query: string
// $layout: map

@mixin gridpoint($query: 'screen', $layout: $_internal) {
  @media #{$query} {
    $_unique-id: unique-id() !global;
    $internal-backup: $_internal;
    $_internal: $layout !global;

    // Gridpoint media placeholders
    // Same as placeholders file, just replace -x with -#{$_unique-id}

    // for container
    %_cont-c-#{$_unique-id} {
      @if $math == fluid { max-width: _lv(width) }
      @if $math == static { width: _lv(width) }

      margin-right: auto;
      margin-left: auto;
    }
    %_cont-l-#{$_unique-id} {
      @if $math == fluid { max-width: _lv(width) }
      @if $math == static { width: _lv(width) }

      margin-right: auto;
      margin-left: 0;
    }
    %_cont-r-#{$_unique-id} {
      @if $math == fluid { max-width: _lv(width) }
      @if $math == static { width: _lv(width) }

      margin-right: 0;
      margin-left: auto;
    }

    // for row
    %row-#{$_unique-id} {
      &:after {
        content: "";
        display: block;
        clear: both;
      }
    }

    // for column
    @for $size from 1 through _lv(columns) {
      %_col-#{$size}-#{$_unique-id} {
        $result: (_cv(column-size) + _cv(gutter-size)) * $size;
        $result: $result - _cv(gutter-size);

        width: $result;
      }
    }
    %_col-f-#{$_unique-id} {
      float: left;
      margin-right: _cv(gutter-size);
    }
    %_col-l-#{$_unique-id} {
      float: right;
      margin-right: 0;
    }

    // for span
    @for $size from 1 through _lv(columns) {
      %_span-#{$size}-#{$_unique-id} {
        width: _cv(span-size) * $size;
      }
    }
    %_span-f-#{$_unique-id} {
      float: left;
    }
    %_span-l-#{$_unique-id} {
      float: right;
    }

    @content;

    $_internal: $internal-backup !global;
    $_unique-id: null !global;
  }
}
